/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
    
    List<List<Integer>> ans = new ArrayList<>();
     levelordertraversal(root,ans);  
       
       return ans;
    }

    public void levelordertraversal(TreeNode root,List<List<Integer>> ans ){
        if(root == null){
            return;
        }

        Queue<TreeNode> que = new ArrayDeque<>();
        que.add(root);

        while(que.size() > 0){
            int size = que.size();
            ArrayList<Integer> result = new ArrayList<>();
            while(size-->0){
                TreeNode rNode = que.remove();

                result.add(rNode.val);

                if(rNode.left != null){
                    que.add(rNode.left);
                }
                if(rNode.right != null){
                    que.add(rNode.right);
                }
            }

            ans.add(result);
        }



    }
     
    }
