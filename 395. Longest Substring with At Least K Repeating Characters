class Solution {
    public int longestSubstring(String s, int k) {
        int ans =0;

        for(int i=1 ; i<=26; i++){
            int xuniquerep = longestwindowxuniquekatleastrepeating(s,k,i);
            ans = Math.max(ans,xuniquerep ); 
        }
        return ans;

    }
    public int longestwindowxuniquekatleastrepeating(String s, int k, int x){
        
        int countunique = 0;
        int countkrepeat = 0;

        int sp =0;
        int ep =0;

        int ans = 0;
        //create a freq. array
        int freq[] = new int[123];

        while(ep<s.length()){
        //add a new member into the window

        char ch = s.charAt(ep);

        freq[ch]++;
        if(freq[ch] == 1) countunique++;
        if(freq[ch] == k) countkrepeat++;

        //shrink window untill <=x
        while(countunique>x){
            char dc = s.charAt(sp);
            freq[dc]--;
            if(freq[dc] == 0) countunique --;
            if(freq[dc] == k-1) countkrepeat--;

            sp++;
        }

        //window will be valid but there is chance that repeating character are not k times or x are not unique
        if(countunique == x && countkrepeat == x){
            ans = Math.max(ans,ep-sp+1);
        }
               ep++;
        }
        return ans;
    }
}
