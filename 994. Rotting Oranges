class Solution {
    static class Pair{
        int row;
        int col;

      
        Pair(int row, int col){
                this.row = row;
                this.col = col;
        }
    }
    public int orangesRotting(int[][] grid) {
        
        int n = grid.length;
        int m = grid[0].length;

        //we use the breadth first search algorithm for that
        Queue<Pair> que = new ArrayDeque<>();
        
        
        for(int i=0; i<n;i++){
            for(int j=0; j < m ; j++){
                if(grid[i][j] == 2){
                    que.add(new Pair(i,j));
                }
            }
        }
        int time = 0;

        while(que.size() > 0){
            int size = que.size();

            while(size-->0){
                Pair rpair = que.remove();
                int c = rpair.col;
                int r = rpair.row;

                if(r-1 >=0 && grid[r-1][c] == 1){
                    grid[r-1][c] = 2;
                    que.add(new Pair(r-1,c));
                }
                if(r+1 <n && grid[r+1][c] == 1){
                    grid[r+1][c] = 2;
                    que.add(new Pair(r+1,c));
                }
                if(c-1 >=0 && grid[r][c-1] == 1){
                    grid[r][c-1] = 2;
                    que.add(new Pair(r, c-1));
                }
                if(c+1 <m && grid[r][c+1] == 1){
                    grid[r][c+1] = 2;
                    que.add(new Pair(r, c+1));
                }

            }
            time++;
        }

        for(int i = 0; i <n;i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }

        if(time == 0){
            return 0;

        }

        return time-1;



    }
}
