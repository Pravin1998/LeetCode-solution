/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int min(TreeNode root){
        return root.left != null ? min(root.left):root.val;
    }

    // time complexity = O(logn), space complexity = O(h)
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root == null){
            return null;
        }
        if(root.val == key){
            //if root is leaf node
            if(root.left == null && root.right == null){
                return null;
            }else if(root.left != null && root.right == null){
                //root having only left child
                return root.left;
            }else if(root.right != null && root.right == null){
                //root having only right child
                return root.right;
            }else{
                //if we have both left child and right child
                int minfromright = min(root.right);
               //update value of minfromright; 
                root.val = minfromright;
                root.right = deleteNode(root.right,minfromright);
     
            }

        }else if(key <root.val){
            root.left = deleteNode(root.left, key);
        }else if(key>root.val){
            root.right = deleteNode(root.right, key);
        }
        return root;

    }
}
