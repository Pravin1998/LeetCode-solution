/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    public void Serialize(TreeNode root, StringBuilder sb){
        if(root == null){
            sb.append("null,");
            return;
        }

        sb.append(root.val+ ",");
        Serialize(root.left , sb);
        Serialize(root.right, sb);
    }
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb =  new StringBuilder("");
        Serialize(root, sb);

        return sb.toString();
    }
    static int idx;

    public TreeNode Deserialize(String arr[]){
        if(idx == arr.length){      
            return null;
        }
        
        if(arr[idx].equals("null")){
            idx++;
            return null;
        }

        int val = Integer.parseInt(arr[idx]);
        idx++;
        TreeNode root = new TreeNode(val);
        
        root.left = Deserialize(arr);
        root.right = Deserialize(arr);

        return root;



    
    }
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        idx = 0;
        String arr[] = data.split(",");
        return Deserialize(arr);
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
