class Solution
{
    ArrayList<Integer> TreeBoundary;
    void leftboundary(Node root){
        if(root == null){
            return;
        }
        if(root.left == null && root.right == null){
            return;
        }
        
        TreeBoundary.add(root.data);
        
        
        
        if(root.left != null){
            leftboundary(root.left);
        }else{
            leftboundary(root.right);
        }
    }
    
    void leafnode(Node root){
        if(root == null){
            return;
        }
        
        if(root.left == null && root.right == null){
            TreeBoundary.add(root.data);
        }
        
        leafnode(root.left);
        leafnode(root.right);
    }
    
    void rightboundary(Node root){
        if(root == null){
            return;
        }
        
        
        if(root.right != null){
            rightboundary(root.right);
        }else{
            rightboundary(root.left);
        }
        
        if(root.left == null && root.right == null){
            return;
        }else{
            TreeBoundary.add(root.data);
        }
        
    }
    
    //TC = O(N), SC = O(H)
	ArrayList <Integer> boundary(Node root)
	{
	    if(root == null){
	        return new ArrayList<>();
	    }    
	    TreeBoundary = new ArrayList<>();
	    
	    //add root
	    TreeBoundary.add(root.data);
	    
	    if(root.left == null && root.right == null){
	        return TreeBoundary;
	    }
	    
	   //add left boundary
	   leftboundary(root.left);
	   
	   //add leaf node
	   leafnode(root);
	   
	   //add right boundary
	   rightboundary(root.right);
	   
	   return TreeBoundary;
	    
	}
}
