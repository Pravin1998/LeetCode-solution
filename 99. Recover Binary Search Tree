/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public class Pair{
        int state;
        TreeNode node;
        Pair(TreeNode node, int state){
            this.node = node;
            this.state = state;
        }
    }
    public TreeNode getnextinorder(Stack<Pair> st){
        while(st.size() > 0){
            Pair top = st.peek();
            if(top.state == 1){
                top.state++;
                if(top.node.left != null) st.push(new Pair(top.node.left,1));
            }else if(top.state == 2){
                top.state++;
                if(top.node.right != null) st.push(new Pair(top.node.right,1));
                return top.node;
            }else{
                st.pop();
            }
        }
        return null;
    }
    public void recoverTree(TreeNode root) {
     Stack<Pair> st = new Stack<>();
     st.push(new Pair(root,1));

     TreeNode a=null;
     TreeNode b = null;
     TreeNode prev = null;
     TreeNode curr = getnextinorder(st);
     while(curr != null){
         if(prev == null){
             prev = curr;
             curr = getnextinorder(st);
         }else{

            if(prev.val>curr.val){
                //bad
                //first check these is first encounter or second
                if(a == null){
                    a = prev;
                    b = curr;
                }else{
                    b = curr;
                }
            }
            prev = curr;
            curr = getnextinorder(st);
         }
     }
     int temp = a.val;
     a.val = b.val;
     b.val = temp;
    }
}
