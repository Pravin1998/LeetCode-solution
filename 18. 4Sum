class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(arr);
        int n = arr.length;
        int i =0;
      

        while(i<n){
              int j = i+1;
            while(j<n){
                //to find remaining target for the sum
                long newtarget = (long)((long)target - (long)((long)arr[i] + (long)arr[j]));
                int l = j+1;
                int r = n-1;
                while(l<r){
                long currentsum = (long)((long)arr[l] + (long)arr[r]);
               
                if(newtarget == currentsum ){
                     ArrayList<Integer> ans = new ArrayList<>();
                    ans.add(arr[i]);
                    ans.add(arr[j]);
                    ans.add(arr[l]);
                    ans.add(arr[r]);
                    res.add(ans);
                    int prevL = arr[l];
                    while(l<r && arr[l] == prevL) l++;

                    int prevR = arr[r];
                    while(r>l && arr[r] == prevR) r--;


                }else if(currentsum<newtarget){
                    int prevL = arr[l];
                    while(l<r && arr[l] == prevL) l++;

                }else{
                    int prevR = arr[r];
                    while(r>l && arr[r] == prevR) r--;
                }

            }
            int prevJ = arr[j];
            while(j<n && arr[j] == prevJ)j++;
        }
        int prevI = arr[i];
            while(i<n && arr[i] == prevI)i++;

    }

    return res;
}
}
